=================정리필==============
=================정리필==============
=================정리필==============

[제어문]

1. 조건문
프로그램 내에서 주어진 조건문의 결과에 따라 별도의 명령을 수행하도록 제어하는 실행문입니다.

[1-1 if문]
if(조건식){
    조건식이 참일때 실행
}

[1-2 else if 문]
if(조건식){
    조건식이 참일때 실행문;
}else{
    거짓일때 실행문;
}


[1-3. if ~ else if문]
if(조건식){
    조건식이 참일때 실행문;
}else if(조건식2){
    조건식2 참일때 실행문;
}else if(조건식3){
    조건식3 참일때 실행문;
}else{
    모든조건이 아닐때 실행문;
}


-switch문
switch문은 if ~ else if문과 마찬가지로 주어진 조건 값에 따라 프로그램이 다른
명령을 수행하도록 하는 조건문입니다.

switch(변수 또는 상수){
    case 값1:
        I 변수 또는 상수의 값이 값1과 일치할 경우 실행할 문장;
    break;
    case 값2:
        변수 또는 상수의 값이 값2과 일치할 경우 실행할 문장;
    break;
    ...
    default:
        비교값이 모두 일치하지 않을 경우 실행할 문장;
}

2. 반복문
프로그램 내에서 같은 명령을 일정 횟수만큼 반복하여 수행하도록 제어하는 실행문입니다.



- while문
조건식이 true인 동안 계속해서 주어진 실행문을 반복함

while(조건식){
    조건식의 결과가 참인 동안 반복될 실행문;
    ...
    (조건식을 거짓으로 변경할 실행문)
}

EX) 5까지 반복 됨
int count = 1;
while (count <= 5) {
    System.out.println("반복 횟수: " + count);
    count++;
}


- do while문

while문은 실행문을 실행하기 전에 먼저 조건식부터 검사를 합니다. 
do while문은 먼저 실행문을 실행한 후 조건식을 검사합니다.

do {
조건식의 결과가 참인 동안 반복될 실행문;
...
(조건식을 거짓으로 변경할 실행문)
}while(조건식);



- for문

for문은 while문과 달리 자체적으로 초기값, 조건식, 증감식을 모두 포함하고 있는
반복문입니다. while문 보다는 간결하게 반복을 표현할 수 있습니다.

for(초기값; 조건식; 증감식){
조건식의 결과가 참인 동안 반복할 실행문;
}
for(let i=1; i<=5; i++){
    
console.log('Hello, Javascript!');
}


- continue문
반복중인 문장 내에서 사용하며 해당 문장의 나머지 부분을 건너뛰고 다음 조건식의 판단으로 넘어가게 합니다.

- break 문
반복중인 문장 내에서 사용하여 해당 반복문을 완전히 종료시키고 반복문 다음에 위치한 실행문으로 이동합니다.

- 중첩반복문
반복문이 2개이상 겹쳐있는 문장을 의미합니다

while(조건식){
    ...
    while(조건식){
        ...
    }
}
for(초기값; 조건식; 증감식){
    ...
    for(초기값; 조건식; 증감식){
        ...
    }
}


