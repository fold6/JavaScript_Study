 [JSON]
 
 [1] : JSON 이란?
 약자 --> JavaScript Object Notation --> 사전 뜻 그대로 --> 자바스크립트 객체 표기법(표현)
 주로 서버와 웹페이지간에 어떤 데이터를 주고 받을 때 많이 사용하는 포맷 형식.
 Javascript에서 객체를 만들 때 사용하는 표현식.
  프로그래밍 언어도 아니고 문법도 아니고 단지 하나의 데이터 저장 방식 --> 그러나 규칙은 있다.

[1] :
[
	{ "name" : "kim", "age" : 20, "nationality" : "KOR" }
	{ "name" : "James", "age" : 30, "nationality" : "USA" }
	{ "name" : "Lupin", "age" : 40, "nationality" : "FRA" }
]
JSON은 "속성 : 값" 또는 "key : value"의 쌍으로 이루어진 데이터 객체를 전달하기 위해 만들어진 포맷.
자바스크립트의 배열과 객체를 만드는 사용방식과 비슷 --> 즉, 자바스크립트의 배열과 객체를 데이터에 적용.
위 데이터는 --> 3개의 아이템으로 이루어진 배열이고 --> 각 항목은 3개의 Property를 가지는 객체로 구성.
그렇다면 자바스크립트 배열이나 객체의 형식과 동일한가? --> 비슷하나 완전 같은건 X --> 예를 들면, 프로퍼티나 값을 쌍따옴표로 처리.

[3] : JSON 특징
일단 사람이 읽기에(보기에) 좋은 구조와 텍스트를 사용.
웹상에서의 비동기 처리 기반의 브라우저/서버 통신 등에서 데이터를 주고 받을 때 많이 사용. 
예전에 많이 사용하는 XML을 대체 --> XML은 헤비하고 넘 복잡
JSON은 XML보다 훨씬 더 가볍고, 간결하고 쉽다.

[4] : 기타
 파이썬 학습자 --> 딕셔너리(dict) 타입과 유사 --> key : value
 거의 모든 언어를 지원.
 XML, JSON 모두 계층적인 구조를 가지고 있다.

 [5] : 차이점
 JSON은 XML과 달리 종료하는 end tag가 필요없다.
 JSON이 더 간결하고 짧다.
 JSON은 배열을 사용할 수 있다. --> 위에서 말한 자바스크립트의 배열과 객체를 데이터에 적용한 포맷.



[예외처리]
오류는 프로그램 실행 전에 발생하는 오류와 프로그램 실행 중에 발생하는 오류로 나누어짐
구문 오류-> 프로그램 실행 전에 발생하는 코드의 문법적인 문제로 발생하는 오류를 의미
예외 -> 프로그램 실행 중에 발생하는 모든 오류를 의미
예외 처리 -> 예외가 발생했을때 프로그램이 중단되지 않게 하는 처리.
            구문 오류는 예외 처리로 처리할 수 없습니다
try{
  //예외가 발생할 가능성이 있는 코드
} catch(){
  //예외가 발생했을때 실행하는 코드
} finally{
  //무조건 실행할 코드
}
try catch finally -> try 구문 안에서 예외가 발생하면 catch 구문에서 처리하고
                         finally 구문은 예외 발생 여부와 상관없이 실행해야 하는 작업이 있을때 사용


