[TypeScript 주요 특징]->타입스크립트의 주요기능
• 인터페이스(Interfaces)
– 인터페이스를 통해서 엔터티(Entity) 형태의 새로운 데이터 타입 정의 – 기본 규칙 정의
• 클래스(Classes)
– 일반적인 OOP 특징을 가짐
– JavaScript의 차후 버전과 호환됨
• 제네릭(Generics)
– 가볍고 재사용 가능한 코드 생성
• 모듈(Modules) - 그룹
– 관련된 인터페이스, 클래스, 함수 등을 묶어서 관리 – 전역(Global) 스코프에서 작성된 코드 분리

[TypeScript 키워드]
class           클래스: 멤버 포함(필드, 생성자, 속성, 메서드(함수))
constructor   	생성자(클래스 초기화)
export         	모듈내에 모듈 밖에서도 호출(public)되는 멤버 생성
extends        	상속시 사용(Java에서의 extends와 동일)
implements     	인터페이스 구현 코드(C#에서는 그냥 콜론(:)) 
import         	모듈에 포함(네임스페이스): 네임스페이스 축약형 생성: import abc = Namespace.Sub;
interface       인터페이스: 코드 규약(계약, 표준) 정의
module        	컨테이너(클래스 또는 모든 코드)
public/private 	액세스 접근 한정자(Member visibility)
=>              this 키워드 범위 내에서의 함수 구문 표현: 람다식(ES6)
:               형식 지정 구분자(VB의 As 키워드와 동일)
…               트리플 닷(나머지 매개변수 문법) (C# “params” 키워드와 동일)
<type name>     형식 변환(Cast/Convert)





[변수 선언]
// str 변수를 string으로 처리
var str: string = ‘hello’; 

// 매개변수와 함수 반환값을 모두 string으로 처리 
function foo(name: string) : string {
return ‘hello’ + name; }

JavaScript/TypeScript의 타입 시스템
• Number => number
• Boolean => boolean
• String => string
• Function => void
– functionName : (s: string, t: string) => void = function(s, t) {};
• Object => any
• Array => any[]


any		               모든 JS 값(C# 예, System.Object)
number		           정수형(integer) 또는 실수형(floating point number) Double-precision 64-bit
boolean              참(true) 또는 거짓(false)
string               텍스트(문자열)
null                 JS null 리터럴
undefined            JS undefined 리터럴
(object types)       모든 클래스, 모듈, 인터페이스 등등
void                 반환값이 없는 함수
(Array)              배열형, 컬렉션 타입
enum                 열거형

