
=== 정리필
=== 정리필
=== 정리필
[6.사용자 정의 함수(function)]
하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미합니다.
함수는 필요할 때마다 호출하여 해당 작업을 반복해서 수행하기 때문에 코드를 재활용할 수 있습니다.

1. 이름만 존재하는 함수

-함수 선언식 (Function Declaration)
함수 선언식은 함수의 이름을 지정하고, 미리 선언된 형태. 코드가 실행되기 전에 자바스크립트 엔진에 의해 함수가 "호이스팅(hoisting)" 돼서 어디서든 호출

function 함수명(){
    함수가 호출되었을 때 실행할 문장;
    ...
}
함수명();
---->단순 코드 블록이라서 단독으로 실행되지 않는다 함수명을 호출해야 함(함수명();)


-함수 표현식 (Function Expression)
-함수 표현식은 변수에 함수를 할당하는 방식. 함수는 변수에 할당되기 전까지 사용될 수 없음
 일반적으로 익명 함수를 사용하는 경우가 많아 (호이스팅되지 않음: 함수 표현식은 선언된 이후에만 호출할 수 있음)

const 함수명= function(){
    함수가 호출되었을 때 실행할 문장;
    ..
}

함수명();
*자바스크립트는 함수를 변수에 저장이 가능
* 자바스크립트는 script 태그를 만나면 자바스크립트 파일을 먼저 읽고 선언된 함수를 먼저 메모리에 저장





2. 매개변수가 있는 함수

-함수 선언식
function 함수명(매개변수, 매개변수2 ..){
    함수가 호출되었을때 실행할 문장;
    ...
}

-함수 표현식
const 함수명 = function (매개변1,,매개변2){
    함수가 호출됏을때 실행할 문장;
}
함수명 (값1,값2)


- 디폴드 매개변수
매개변수의 값을 정하지 않으면 대신 기본값을 변수에 저장

function 함수명(매개변수1= 값1, 매변2=값2,..){
    함수가 호출되었을때 실행할 문장;
}


-나머지 매개변수
생략접두사 (...)를 사용하여 특정위치의 인수부터 마지막 인수까지 한번에 지정

function 함수명(매개변수1, 매변2... 매개변수3){
    함수가 호출됐을때 실행할문장;
}



3.리턴값이 있는 함수(callback함수)

function 함수명(매개변수1, 매개변수2 ..){
    함수가 호출되었을 때 실행할 문장;
    ...
    return 값;
}
const 상수 = 함수명(값1, 값2..);


4. 화살표 함수
function 키워드를 사용하여 함수를 만드는 것보다 간단하게 표현. 화살표 함수는 익명.

(매개변수1, 매개변수2..) => 실행문

1.매개변수가 없는 함수
const func1 = function (){
    console.log('안녕하세요, JS!');
}
화살표 함수로 변환 // 간단하게 표현됨
const func1 = () => console.log('안녕하세요, JS!');



2.매개변수가 있는 함수
const func2 = (x,y) => console.log(`두수의 합: ${x+y}`);
const func2 = x => console.log(`매개변수로 전달받은 값 : ${x}`);

3.리턴값이 있는 함수
const func3 = (x,y)=>{
    let sum = 0;
    for(let i =x; i<=y; i++){
        sum+=1;
    }
    return sum;
}

4.동적으로 함수 생성
const age = 20;

const adult = (age > 18) ? () => alert('성인 입니다'); : () => alert('미성년자 입니다'); 
// 참/거짓일때 실행

adult();



